const fs = require('fs')


module.exports.contractLedgerAbi = JSON.parse(fs.readFileSync('contracts/data_ledger.json'));
module.exports.contractLedgerBytecode = "6080604052600180546001600160a01b0319167321a018606490c031a8c02bb6b992d8ae44add37f17905534801561003657600080fd5b506109b5806100466000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806321f8a7211461006757806377ad95ca146100a0578063b45a85a9146100bf578063c9776a6d146101fb578063cfae3217146102f6578063e30081a014610373575b600080fd5b6100846004803603602081101561007d57600080fd5b5035610399565b604080516001600160a01b039092168252519081900360200190f35b6100bd600480360360208110156100b657600080fd5b5035610419565b005b6100bd600480360360808110156100d557600080fd5b813591908101906040810160208201356401000000008111156100f757600080fd5b82018360208201111561010957600080fd5b8035906020019184600183028401116401000000008311171561012b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295843595909490935060408101925060200135905064010000000081111561018657600080fd5b82018360208201111561019857600080fd5b803590602001918460018302840111640100000000831117156101ba57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104b9945050505050565b6102186004803603602081101561021157600080fd5b5035610603565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610259578181015183820152602001610241565b50505050905090810190601f1680156102865780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156102b95781810151838201526020016102a1565b50505050905090810190601f1680156102e65780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6102fe61073f565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610338578181015183820152602001610320565b50505050905090810190601f1680156103655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100bd6004803603602081101561038957600080fd5b50356001600160a01b0316610760565b60008054604080516321f8a72160e01b81526004810185905290516001600160a01b03909216916321f8a7219160248082019260209290919082900301818787803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b505050506040513d602081101561041157600080fd5b505192915050565b6001546001600160a01b031633146104625760405162461bcd60e51b81526004018080602001828103825260338152602001806108c56033913960400191505060405180910390fd5b60008181526002602052604081209061047b82826107cb565b6104896001830160006107cb565b505060405181907f072007d551e16de6c1b8938fdd0559f70033d87037e5dffa28631256df69f9fe90600090a250565b6104c282610399565b6001600160a01b0316336001600160a01b0316146105115760405162461bcd60e51b815260040180806020018281038252602b815260200180610955602b913960400191505060405180910390fd5b610519610812565b83815260208082018390526000868152600282526040902082518051849361054592849291019061082c565b50602082810151805161055e926001850192019061082c565b50905050847f06c4f2b8beb126621a4c74187a1573e7f48017b16d171df264507e2131b20f42856040518080602001828103825283818151815260200191508051906020019080838360005b838110156105c25781810151838201526020016105aa565b50505050905090810190601f1680156105ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050505050565b60008181526002602081815260409283902080548451600180831615610100026000190190921694909404601f81018490048402850184019095528484526060948594929391840192918491908301828280156106a15780601f10610676576101008083540402835291602001916106a1565b820191906000526020600020905b81548152906001019060200180831161068457829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529597508694509250840190508282801561072f5780601f106107045761010080835404028352916020019161072f565b820191906000526020600020905b81548152906001019060200180831161071257829003601f168201915b5050505050905091509150915091565b60606040518060600160405280603181526020016109246031913990505b90565b6001546001600160a01b031633146107a95760405162461bcd60e51b815260040180806020018281038252602c8152602001806108f8602c913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b50805460018160011615610100020316600290046000825580601f106107f1575061080f565b601f01602090049060005260206000209081019061080f91906108aa565b50565b604051806040016040528060608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061086d57805160ff191683800117855561089a565b8280016001018555821561089a579182015b8281111561089a57825182559160200191906001019061087f565b506108a69291506108aa565b5090565b61075d91905b808211156108a657600081556001016108b056fe596f7520646f206e6f74206861766520656e6f7567682070726976696c6567657320746f20646f207468697320616374696f6e596f7520646f206e6f7420686176652070726976696c6567657320746f20646f207468697320616374696f6e48656c6c6f20796f7520686176652063616c6c65642074686520636f6e747261637420646174614c65646765722e736f6c546865204944207468617420796f7520617265207573696e67206973206e6f742072656769737465726564a2646970667358221220daade6b4ec19fbba7f678e475205a0ef722977bd90e2c550791091f4f68383dc64736f6c63430006010033";
var contractLedgerAddress = "0x3c7592697a284E3F9F06Cc1F85bf2216279E1d36"; 
module.exports.contractLedgerAddress = contractLedgerAddress;

// This function initialize the contract
module.exports.initContract = function (web3, abi, address)
{
	let myContract = new web3.eth.Contract(abi, address);

  return myContract;
}

// This function only greets the contract
module.exports.greetContract = async function(myContract)
{
  let response = myContract.methods.greet().call();
  return response;
}

// This function stores data in the specified contract and returns the
// hash of the transaction.
module.exports.storeDataLedger = async function (myContract, dataToStore, accountAddr)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.storeInfo(dataToStore.hash
			, dataToStore.uri
			, dataToStore.id
			, dataToStore.description)
		.send({
			from: accountAddr,
			gas: 400000,
			gasPrice: 0
		}, function(err, resp) {
			if (err) reject(err);
			else resolve(resp);
		});
	});
}


/******************* Access Control Contract variables ***************************/
module.exports.accessControlABI = JSON.parse(fs.readFileSync('contracts/accessControl.json'));
module.exports.accessControlBytecode = "6080604052600080546001600160a01b0319167321a018606490c031a8c02bb6b992d8ae44add37f17905534801561003657600080fd5b50610531806100466000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636d645b441161005b5780636d645b441461018f5780638b7e87ce14610197578063cfae3217146101b4578063fce9512a146102315761007d565b806321f8a7211461008257806351c8fa97146100bb578063670d65ea146100e9575b600080fd5b61009f6004803603602081101561009857600080fd5b5035610257565b604080516001600160a01b039092168252519081900360200190f35b6100e7600480360360408110156100d157600080fd5b50803590602001356001600160a01b0316610272565b005b6100e7600480360360208110156100ff57600080fd5b81019060208101813564010000000081111561011a57600080fd5b82018360208201111561012c57600080fd5b8035906020019184600183028401116401000000008311171561014e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102d8945050505050565b61009f6102fc565b6100e7600480360360208110156101ad57600080fd5b503561030c565b6101bc610366565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f65781810151838201526020016101de565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101bc6004803603602081101561024757600080fd5b50356001600160a01b0316610386565b6000908152600160205260409020546001600160a01b031690565b6000546001600160a01b0316331461028657fe5b60008281526001602052604080822080546001600160a01b0319166001600160a01b0385161790555183917fe2888d2900e8be92bf075b2e7c635f9813c3e18afb476d80b6dd545ad34d717391a25050565b33600090815260026020908152604090912082516102f89284019061042f565b5050565b6000546001600160a01b03165b90565b6000546001600160a01b0316331461032057fe5b60008181526001602052604080822080546001600160a01b03191690555182917f761c7f5deea18480fd4c3286fb929a518afd9c1faa2b9a6f4669ba2f86995a4a91a250565b60606040518060600160405280603481526020016104c860349139905090565b6001600160a01b038116600090815260026020818152604092839020805484516001821615610100026000190190911693909304601f810183900483028401830190945283835260609390918301828280156104235780601f106103f857610100808354040283529160200191610423565b820191906000526020600020905b81548152906001019060200180831161040657829003601f168201915b50505050509050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061047057805160ff191683800117855561049d565b8280016001018555821561049d579182015b8281111561049d578251825591602001919060010190610482565b506104a99291506104ad565b5090565b61030991905b808211156104a957600081556001016104b356fe48656c6c6f20796f7520686176652063616c6c65642074686520636f6e747261637420616363657373436f6e74726f6c2e736f6ca26469706673582212209f07f0e9ceb2d58d0e893803b32c5d8e4c883996935dda25df0f5d48f9cdd2e864736f6c63430006010033";
var accessControlAddr = "0xD2577E43bAd82FDB894012Fdf7Bf0caDe73e65Ef";
module.exports.accessControlAddr = accessControlAddr;

module.exports.setAddressContractID = async function (myContract, account) 
{
		// Setting the address of controlAccess Contract
		return new Promise(function (resolve, reject)
		{
			myContract.methods.setAddress(accessControlAddr)
			.send({from: account}
			, function(err, resp)
			{
				if (err) reject(err);
				else resolve(resp);
			});
		});
}

/************************** Balance  Contract variables ***************************/
module.exports.balanceABI = JSON.parse(fs.readFileSync('contracts/balance.json'));;
module.exports.balanceBytecode = "6080604052600480546001600160a01b0319167321a018606490c031a8c02bb6b992d8ae44add37f17905534801561003657600080fd5b506107ce806100466000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806363c6c2ef1161005b57806363c6c2ef1461010e57806394c49b9d14610145578063c71daccb14610171578063e30081a0146101795761007d565b806330d87a571461008257806343fa6211146100a75780634e635503146100d6575b600080fd5b6100a56004803603604081101561009857600080fd5b508035906020013561019f565b005b6100c4600480360360208110156100bd57600080fd5b5035610462565b60408051918252519081900360200190f35b6100a5600480360360808110156100ec57600080fd5b506001600160a01b038135169060208101359060408101359060600135610474565b6101316004803603604081101561012457600080fd5b50803590602001356104f2565b604080519115158252519081900360200190f35b6101316004803603604081101561015b57600080fd5b506001600160a01b038135169060200135610719565b6100c4610744565b6100a56004803603602081101561018f57600080fd5b50356001600160a01b0316610762565b6000828152600360205260409020548110156101b757fe5b3360009081526001602081815260408084208685529091529091205460ff16151514156101e057fe5b600080546040805163c9776a6d60e01b815260048101869052905160609384936001600160a01b03169263c9776a6d9260248083019392829003018186803b15801561022b57600080fd5b505afa15801561023f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561026857600080fd5b8101908080516040519392919084600160201b82111561028757600080fd5b90830190602082018581111561029c57600080fd5b8251600160201b8111828201881017156102b557600080fd5b82525081516020918201929091019080838360005b838110156102e25781810151838201526020016102ca565b50505050905090810190601f16801561030f5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084600160201b82111561033157600080fd5b90830190602082018581111561034657600080fd5b8251600160201b81118282018810171561035f57600080fd5b82525081516020918201929091019080838360005b8381101561038c578181015183820152602001610374565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b50604052505050915091508051600014156103d057fe5b81516103d857fe5b6103e184610462565b6103e757fe5b600084815260036020818152604080842080546002805490910190553380865260018085528387208b8852855295839020805460ff19169096179095559282529154825190815291518793927f58d967c9a9a54b98c710c372cfe363bb9466f443b58def6976bd0e2dc77af84192908290030190a350505050565b60009081526003602052604090205490565b6004546001600160a01b0316331461048857fe5b6001600160a01b0384166000818152600160209081526040808320878452825291829020805460ff19169055815185815290810184905281518693927f5561f506afbfc9a46c0e3398234971c86c54a89b00fca057c93dde013fb63198928290030190a350505050565b6004546000906001600160a01b0316331461050957fe5b600080546040805163c9776a6d60e01b815260048101879052905160609384936001600160a01b03169263c9776a6d9260248083019392829003018186803b15801561055457600080fd5b505afa158015610568573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561059157600080fd5b8101908080516040519392919084600160201b8211156105b057600080fd5b9083019060208201858111156105c557600080fd5b8251600160201b8111828201881017156105de57600080fd5b82525081516020918201929091019080838360005b8381101561060b5781810151838201526020016105f3565b50505050905090810190601f1680156106385780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084600160201b82111561065a57600080fd5b90830190602082018581111561066f57600080fd5b8251600160201b81118282018810171561068857600080fd5b82525081516020918201929091019080838360005b838110156106b557818101518382015260200161069d565b50505050905090810190601f1680156106e25780820380516001836020036101000a031916815260200191505b50604052505050915091508051600014156106f957fe5b815161070157fe5b50505060009182526003602052604090912055600190565b6001600160a01b03919091166000908152600160209081526040808320938352929052205460ff1690565b6004546000906001600160a01b0316331461075b57fe5b5060025490565b6004546001600160a01b0316331461077657fe5b600080546001600160a01b0319166001600160a01b039290921691909117905556fea2646970667358221220738344b1c99f6bdf9ca017aae465a445c817b89795dbc166bb580122df516a4664736f6c63430006010033";
module.exports.balanceContractAddress = "0x48c029C2896C0B3b27bCb714c55203294Db7AdA3";

module.exports.setAddressBalanceContract = async function(myContract, account)
{
	// Setting the address of DataLedger Contract
	return new Promise(function(resolve, reject)
	{
		myContract.methods.setAddress(contractLedgerAddress)
		.send({
			from: account
		}
		, function(err, resp)
		{
			if (err) reject(err);
			else resolve(resp);
		});
	});
}


// This function only can be used by the owner of the data.
// It sets the price of a piece of data, which is accessible by its hash
module.exports.setPrice = function(myContract, hash, price, account)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.setPriceData(hash, price)
		.send({
			from: account
		}
		, function (err, resp)
		{
			if (err) {reject(err);}
			else{resolve(resp);};
		});
	});
}


// Getting the price of a piece of data
module.exports.getPrice = async function (myContract, hash)
{
	let price = await myContract.methods.getPriceData(hash).call();
	return price
}


// Function that client must use to buy data
module.exports.buyData =  function(myContract, hash, tokens, account)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.payData(hash, tokens).send({
			from: account
		}
		, function(err, resp)
		{
			if (err) reject(err);
			else resolve(resp);
		});
	});

}


// Sending transaction
module.exports.sendTransaction = function(web3, _from, _to, _data)
{

	return new Promise(function(resolve, reject)
	{
		web3.eth.sendTransaction({
			from: _from,
			to: _to,
			data: _data,
			gas: '40000000',
			gasPrice: 0
		}
		, function(error, hash)
		{
			if (error)reject(error);
			else resolve(hash);
		});
	});

}


// Emiting an event in the contract showing that the transaction has been sent
module.exports.balanceSendToClient =  function(myContract
, hash
, txHashExchange
, txHashData
, account
, clientAccount)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.sendToClient(clientAccount, hash, txHashExchange, txHashData)
		.send({from: account}
		, function(err, resp)
		{
			if (err) reject(err);
			else resolve(resp);
		});
	});

}
