const fs = require('fs')


module.exports.contractLedgerAbi = JSON.parse(fs.readFileSync('contracts/data_ledger.json'));
module.exports.contractLedgerBytecode = "6080604052600180546001600160a01b0319167321a018606490c031a8c02bb6b992d8ae44add37f17905534801561003657600080fd5b506109b5806100466000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806321f8a7211461006757806377ad95ca146100a0578063b45a85a9146100bf578063c9776a6d146101fb578063cfae3217146102f6578063e30081a014610373575b600080fd5b6100846004803603602081101561007d57600080fd5b5035610399565b604080516001600160a01b039092168252519081900360200190f35b6100bd600480360360208110156100b657600080fd5b5035610419565b005b6100bd600480360360808110156100d557600080fd5b813591908101906040810160208201356401000000008111156100f757600080fd5b82018360208201111561010957600080fd5b8035906020019184600183028401116401000000008311171561012b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295843595909490935060408101925060200135905064010000000081111561018657600080fd5b82018360208201111561019857600080fd5b803590602001918460018302840111640100000000831117156101ba57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104b9945050505050565b6102186004803603602081101561021157600080fd5b5035610603565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610259578181015183820152602001610241565b50505050905090810190601f1680156102865780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156102b95781810151838201526020016102a1565b50505050905090810190601f1680156102e65780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6102fe61073f565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610338578181015183820152602001610320565b50505050905090810190601f1680156103655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100bd6004803603602081101561038957600080fd5b50356001600160a01b0316610760565b60008054604080516321f8a72160e01b81526004810185905290516001600160a01b03909216916321f8a7219160248082019260209290919082900301818787803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b505050506040513d602081101561041157600080fd5b505192915050565b6001546001600160a01b031633146104625760405162461bcd60e51b81526004018080602001828103825260338152602001806108c56033913960400191505060405180910390fd5b60008181526002602052604081209061047b82826107cb565b6104896001830160006107cb565b505060405181907f072007d551e16de6c1b8938fdd0559f70033d87037e5dffa28631256df69f9fe90600090a250565b6104c282610399565b6001600160a01b0316336001600160a01b0316146105115760405162461bcd60e51b815260040180806020018281038252602b815260200180610955602b913960400191505060405180910390fd5b610519610812565b83815260208082018390526000868152600282526040902082518051849361054592849291019061082c565b50602082810151805161055e926001850192019061082c565b50905050847f06c4f2b8beb126621a4c74187a1573e7f48017b16d171df264507e2131b20f42856040518080602001828103825283818151815260200191508051906020019080838360005b838110156105c25781810151838201526020016105aa565b50505050905090810190601f1680156105ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050505050565b60008181526002602081815260409283902080548451600180831615610100026000190190921694909404601f81018490048402850184019095528484526060948594929391840192918491908301828280156106a15780601f10610676576101008083540402835291602001916106a1565b820191906000526020600020905b81548152906001019060200180831161068457829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529597508694509250840190508282801561072f5780601f106107045761010080835404028352916020019161072f565b820191906000526020600020905b81548152906001019060200180831161071257829003601f168201915b5050505050905091509150915091565b60606040518060600160405280603181526020016109246031913990505b90565b6001546001600160a01b031633146107a95760405162461bcd60e51b815260040180806020018281038252602c8152602001806108f8602c913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b50805460018160011615610100020316600290046000825580601f106107f1575061080f565b601f01602090049060005260206000209081019061080f91906108aa565b50565b604051806040016040528060608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061086d57805160ff191683800117855561089a565b8280016001018555821561089a579182015b8281111561089a57825182559160200191906001019061087f565b506108a69291506108aa565b5090565b61075d91905b808211156108a657600081556001016108b056fe596f7520646f206e6f74206861766520656e6f7567682070726976696c6567657320746f20646f207468697320616374696f6e596f7520646f206e6f7420686176652070726976696c6567657320746f20646f207468697320616374696f6e48656c6c6f20796f7520686176652063616c6c65642074686520636f6e747261637420646174614c65646765722e736f6c546865204944207468617420796f7520617265207573696e67206973206e6f742072656769737465726564a2646970667358221220daade6b4ec19fbba7f678e475205a0ef722977bd90e2c550791091f4f68383dc64736f6c63430006010033";
var contractLedgerAddress = "0x8A45172AEbC3644B284a720C5C5BFecE5890b435"; 
module.exports.contractLedgerAddress = contractLedgerAddress;

// This function initialize the contract
module.exports.initContract = function (web3, abi, address)
{
	let myContract = new web3.eth.Contract(abi, address);

  return myContract;
}

// This function only greets the contract
module.exports.greetContract = async function(myContract)
{
  let response = myContract.methods.greet().call();
  return response;
}

// This function stores data in the specified contract and returns the
// hash of the transaction.
module.exports.storeDataLedger = async function (myContract, dataToStore, accountAddr)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.storeInfo(dataToStore.hash
			, dataToStore.uri
			, dataToStore.id
			, dataToStore.description)
		.send({
			from: accountAddr,
			gas: 400000,
			gasPrice: 0
		}, function(err, resp) {
			if (err) reject(err);
			else resolve(resp);
		});
	});
}


/******************* Access Control Contract variables ***************************/
module.exports.accessControlABI = JSON.parse(fs.readFileSync('contracts/accessControl.json'));
module.exports.accessControlBytecode = "6080604052600080546001600160a01b0319167321a018606490c031a8c02bb6b992d8ae44add37f17905534801561003657600080fd5b50610531806100466000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636d645b441161005b5780636d645b441461018f5780638b7e87ce14610197578063cfae3217146101b4578063fce9512a146102315761007d565b806321f8a7211461008257806351c8fa97146100bb578063670d65ea146100e9575b600080fd5b61009f6004803603602081101561009857600080fd5b5035610257565b604080516001600160a01b039092168252519081900360200190f35b6100e7600480360360408110156100d157600080fd5b50803590602001356001600160a01b0316610272565b005b6100e7600480360360208110156100ff57600080fd5b81019060208101813564010000000081111561011a57600080fd5b82018360208201111561012c57600080fd5b8035906020019184600183028401116401000000008311171561014e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102d8945050505050565b61009f6102fc565b6100e7600480360360208110156101ad57600080fd5b503561030c565b6101bc610366565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f65781810151838201526020016101de565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101bc6004803603602081101561024757600080fd5b50356001600160a01b0316610386565b6000908152600160205260409020546001600160a01b031690565b6000546001600160a01b0316331461028657fe5b60008281526001602052604080822080546001600160a01b0319166001600160a01b0385161790555183917fe2888d2900e8be92bf075b2e7c635f9813c3e18afb476d80b6dd545ad34d717391a25050565b33600090815260026020908152604090912082516102f89284019061042f565b5050565b6000546001600160a01b03165b90565b6000546001600160a01b0316331461032057fe5b60008181526001602052604080822080546001600160a01b03191690555182917f761c7f5deea18480fd4c3286fb929a518afd9c1faa2b9a6f4669ba2f86995a4a91a250565b60606040518060600160405280603481526020016104c860349139905090565b6001600160a01b038116600090815260026020818152604092839020805484516001821615610100026000190190911693909304601f810183900483028401830190945283835260609390918301828280156104235780601f106103f857610100808354040283529160200191610423565b820191906000526020600020905b81548152906001019060200180831161040657829003601f168201915b50505050509050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061047057805160ff191683800117855561049d565b8280016001018555821561049d579182015b8281111561049d578251825591602001919060010190610482565b506104a99291506104ad565b5090565b61030991905b808211156104a957600081556001016104b356fe48656c6c6f20796f7520686176652063616c6c65642074686520636f6e747261637420616363657373436f6e74726f6c2e736f6ca26469706673582212209f07f0e9ceb2d58d0e893803b32c5d8e4c883996935dda25df0f5d48f9cdd2e864736f6c63430006010033";
var accessControlAddr = "0xb71B39131130157c7b690f0473efAD1989031d3C";
module.exports.accessControlAddr = accessControlAddr;

module.exports.setAddressContractID = async function (myContract, account) 
{
		// Setting the address of controlAccess Contract
		return new Promise(function (resolve, reject)
		{
			myContract.methods.setAddress(accessControlAddr)
			.send({from: account}
			, function(err, resp)
			{
				if (err) reject(err);
				else resolve(resp);
			});
		});
}

/************************** Balance  Contract variables ***************************/
module.exports.balanceABI = JSON.parse(fs.readFileSync('contracts/balance.json'));;
module.exports.balanceBytecode = "608060405260028054600160a060020a0319167321a018606490c031a8c02bb6b992d8ae44add37f179055600160045534801561003b57600080fd5b50610a168061004b6000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313a5b50a81146100875780632e3ad603146100aa57806343fa6211146100c25780634b802d55146100ec57806363c6c2ef14610113578063e30081a014610142578063e70996f214610163575b600080fd5b34801561009357600080fd5b506100a8600160a060020a036004351661017b565b005b3480156100b657600080fd5b506100a86004356101be565b3480156100ce57600080fd5b506100da6004356102a6565b60408051918252519081900360200190f35b3480156100f857600080fd5b506100a8600160a060020a03600435166024356044356102b8565b34801561011f57600080fd5b5061012e60043560243561047b565b604080519115158252519081900360200190f35b34801561014e57600080fd5b506100a8600160a060020a03600435166105fb565b34801561016f57600080fd5b506100a860043561063e565b600254600160a060020a0316331461018f57fe5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600090815260036020908152604080832084845290915290205460ff610100909104161515600114610261576040805160e560020a62461bcd02815260206004820152602d60248201527f54686520636c69656e7420686173206e6f7420626f7567687420746865206d6560448201527f61737572656d656e742079657400000000000000000000000000000000000000606482015290519081900360840190fd5b336000818152600360205260408082206001018054600019019055518392917fe2e91035b1a52f7ba9a89d081b3b10b6ad4812f301e92a478e17cd9eb5641ea991a350565b60009081526006602052604090205490565b600254600160a060020a03163314610340576040805160e560020a62461bcd02815260206004820152603060248201527f5573657220686173206e6f7420656e6f7567682070726976696c65676573207460448201527f6f20646f2074686973206f7074696f6e00000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038316600090815260036020908152604080832085845290915290205460ff16151560011461040c576040805160e560020a62461bcd02815260206004820152604560248201527f546865726520686173206e6f74206265656e20616e792070757263686173652060448201527f6173736f63696174656420746f2074686973206861736820616e64207468697360648201527f2075736572000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600160a060020a0383166000818152600360209081526040808320868452825291829020805461010061ff00199091161760ff19169055815184815291518593927fc845b00aa923b3cc1a6bf20401682a98918640788d078704e44ec3f19099439b92908290030190a3505050565b6002546000906060908190600160a060020a0316331461049757fe5b60008054604080517fc9776a6d000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a039092169263c9776a6d9260248084019382900301818387803b1580156104f857600080fd5b505af115801561050c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561053557600080fd5b81019080805164010000000081111561054d57600080fd5b8201602081018481111561056057600080fd5b815164010000000081118282018710171561057a57600080fd5b5050929190602001805164010000000081111561059657600080fd5b820160208101848111156105a957600080fd5b81516401000000008111828201871017156105c357600080fd5b505080519496509450505090151590506105d957fe5b815115156105e357fe5b50505060009182526006602052604090912055600190565b600254600160a060020a0316331461060f57fe5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154604080517ffce9512a0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163fce9512a9160248082019260009290919082900301818387803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156106e057600080fd5b8101908080516401000000008111156106f857600080fd5b8201602081018481111561070b57600080fd5b815164010000000081118282018710171561072557600080fd5b505051151592506107a9915050576040805160e560020a62461bcd02815260206004820152602760248201527f54686520636c69656e74206d75737420696e646963617465206869732070756260448201527f6c6963206b657900000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600360209081526040808320848452909152902054610100900460ff1615610847576040805160e560020a62461bcd02815260206004820152602860248201527f54686520757365722068617320616c726561647920626f75676874207468697360448201527f20656c656d656e74000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b33600090815260036020908152604080832084845290915290205460ff16156108e0576040805160e560020a62461bcd02815260206004820152602f60248201527f5468652070726f6363657373206f66207468697320707572636861736520697360448201527f207374696c6c206f6e20676f696e670000000000000000000000000000000000606482015290519081900360840190fd5b6004543360009081526003602052604090206001015410610971576040805160e560020a62461bcd02815260206004820152603660248201527f546865726520617265206d6561737572656d656e74732074686174206861732060448201527f6e6f74206265656e20636f6e6669726d65642079657400000000000000000000606482015290519081900360840190fd5b336000818152600360208181526040808420868552808352908420805460ff191660019081179091559385905291905281018054909101905581907f58d967c9a9a54b98c710c372cfe363bb9466f443b58def6976bd0e2dc77af8416109d6836102a6565b60408051918252519081900360200190a3505600a165627a7a72305820fa5fd8e22e2c684c27b73f59979ee7207755b606310ef1f2d0247ad04be34d910029";
module.exports.balanceContractAddress = "0xa3A644BC099d1d5f4c2Ea7F0540B84C61D0b2dE9";

module.exports.setAddressBalanceContract = async function(myContract, account)
{
	// Setting the address of DataLedger Contract
	return new Promise(function(resolve, reject)
	{
		myContract.methods.setAddress(contractLedgerAddress)
		.send({
			from: account
		}
		, function(err, resp)
		{
			if (err) reject(err);
			else resolve(resp);
		});
	});
}


module.exports.setAddressBalanceContract2 = async function(myContract, account)
{
	// Setting the address of accesControl Contract
	return new Promise(function(resolve, reject)
	{
		myContract.methods.setAddress2(accessControlAddr)
		.send({
			from: account
		}
		, function(err, resp)
		{
			if (err) reject(err);
			else resolve(resp);
		});
	});
}


// This function only can be used by the owner of the data.
// It sets the price of a piece of data, which is accessible by its hash
module.exports.setPrice = function(myContract, hash, price, account)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.setPriceData(hash, price)
		.send({
			from: account
		}
		, function (err, resp)
		{
			if (err) {reject(err);}
			else{resolve(resp);};
		});
	});
}


// Getting the price of a piece of data
module.exports.getPrice = async function (myContract, hash)
{
	let price = await myContract.methods.getPriceData(hash).call();
	return price
}


// Function that client must use to buy data
module.exports.buyData =  function(myContract, hash, tokens, account)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.payData(hash, tokens).send({
			from: account
		}
		, function(err, resp)
		{
			if (err) reject(err);
			else resolve(resp);
		});
	});

}



// Send transaction to contract
module.exports.sendTransactionContract = async function(web3, transaction, privKey)
{
	let options =  
	{
		to: 			transaction._parent._address,
		data: 		transaction.encodeABI(),
		gasPrice: '0',
		gas:	400000
	};

	let signedTransaction = await web3.eth.accounts.signTransaction(options, privKey);
	let receipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
	return receipt;
}