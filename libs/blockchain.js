const fs = require('fs')


module.exports.contractLedgerAbi = JSON.parse(fs.readFileSync('contracts/data_ledger.json'));
module.exports.contractLedgerBytecode = "6080604052600180546001600160a01b0319167321a018606490c031a8c02bb6b992d8ae44add37f17905534801561003657600080fd5b5061087a806100466000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806321f8a7211461005c578063b45a85a914610095578063c9776a6d146101d3578063cfae3217146102ce578063e30081a01461034b575b600080fd5b6100796004803603602081101561007257600080fd5b5035610371565b604080516001600160a01b039092168252519081900360200190f35b6101d1600480360360808110156100ab57600080fd5b813591908101906040810160208201356401000000008111156100cd57600080fd5b8201836020820111156100df57600080fd5b8035906020019184600183028401116401000000008311171561010157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295843595909490935060408101925060200135905064010000000081111561015c57600080fd5b82018360208201111561016e57600080fd5b8035906020019184600183028401116401000000008311171561019057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103f1945050505050565b005b6101f0600480360360208110156101e957600080fd5b5035610542565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610231578181015183820152602001610219565b50505050905090810190601f16801561025e5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610291578181015183820152602001610279565b50505050905090810190601f1680156102be5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6102d661067e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103105781810151838201526020016102f8565b50505050905090810190601f16801561033d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101d16004803603602081101561036157600080fd5b50356001600160a01b031661069f565b60008054604080516321f8a72160e01b81526004810185905290516001600160a01b03909216916321f8a7219160248082019260209290919082900301818787803b1580156103bf57600080fd5b505af11580156103d3573d6000803e3d6000fd5b505050506040513d60208110156103e957600080fd5b505192915050565b6103fa82610371565b6001600160a01b0316336001600160a01b0316146104495760405162461bcd60e51b815260040180806020018281038252602b81526020018061081a602b913960400191505060405180910390fd5b61045161070a565b83815260208082018390526000868152600282526040902082518051849361047d928492910190610724565b5060208281015180516104969260018501920190610724565b509050507f06c4f2b8beb126621a4c74187a1573e7f48017b16d171df264507e2131b20f4285856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105005781810151838201526020016104e8565b50505050905090810190601f16801561052d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050565b60008181526002602081815260409283902080548451600180831615610100026000190190921694909404601f81018490048402850184019095528484526060948594929391840192918491908301828280156105e05780601f106105b5576101008083540402835291602001916105e0565b820191906000526020600020905b8154815290600101906020018083116105c357829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529597508694509250840190508282801561066e5780601f106106435761010080835404028352916020019161066e565b820191906000526020600020905b81548152906001019060200180831161065157829003601f168201915b5050505050905091509150915091565b60606040518060600160405280603181526020016107e96031913990505b90565b6001546001600160a01b031633146106e85760405162461bcd60e51b815260040180806020018281038252602c8152602001806107bd602c913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b604051806040016040528060608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061076557805160ff1916838001178555610792565b82800160010185558215610792579182015b82811115610792578251825591602001919060010190610777565b5061079e9291506107a2565b5090565b61069c91905b8082111561079e57600081556001016107a856fe596f7520646f206e6f7420686176652070726976696c6567657320746f20646f207468697320616374696f6e48656c6c6f20796f7520686176652063616c6c65642074686520636f6e747261637420646174614c65646765722e736f6c546865204944207468617420796f7520617265207573696e67206973206e6f742072656769737465726564a264697066735822122068efde93fff23dcb69bb3156ea6c864147b84c69893b692946dc116fc1c0dd5864736f6c63430006010033";
var contractLedgerAddress = "0xF345E539a85087642B1CFBBbCd6D6cA946115fa2"; 
module.exports.contractLedgerAddress = contractLedgerAddress;

// This function initialize the contract
module.exports.initContract = function (web3, abi, address)
{
	let myContract = new web3.eth.Contract(abi, address);

  return myContract;
}

// This function only greets the contract
module.exports.greetContract = async function(myContract)
{
  let response = myContract.methods.greet().call();
  return response;
}

// This function stores data in the specified contract and returns the
// hash of the transaction.
module.exports.storeDataLedger = async function (myContract, dataToStore, accountAddr)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.storeInfo(dataToStore.hash
			, dataToStore.uri
			, dataToStore.id
			, dataToStore.description)
		.send({
			from: accountAddr,
			gas: 400000,
			gasPrice: 0
		}, function(err, resp) {
			if (err) reject(err);
			else resolve(resp);
		});
	});
}


/******************* Access Control Contract variables ***************************/
module.exports.accessControlABI = JSON.parse(fs.readFileSync('contracts/accessControl.json'));
module.exports.accessControlBytecode = "6080604052600080546001600160a01b0319167321a018606490c031a8c02bb6b992d8ae44add37f17905534801561003657600080fd5b50610531806100466000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636d645b441161005b5780636d645b441461018f5780638b7e87ce14610197578063cfae3217146101b4578063fce9512a146102315761007d565b806321f8a7211461008257806351c8fa97146100bb578063670d65ea146100e9575b600080fd5b61009f6004803603602081101561009857600080fd5b5035610257565b604080516001600160a01b039092168252519081900360200190f35b6100e7600480360360408110156100d157600080fd5b50803590602001356001600160a01b0316610272565b005b6100e7600480360360208110156100ff57600080fd5b81019060208101813564010000000081111561011a57600080fd5b82018360208201111561012c57600080fd5b8035906020019184600183028401116401000000008311171561014e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102d8945050505050565b61009f6102fc565b6100e7600480360360208110156101ad57600080fd5b503561030c565b6101bc610366565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f65781810151838201526020016101de565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101bc6004803603602081101561024757600080fd5b50356001600160a01b0316610386565b6000908152600160205260409020546001600160a01b031690565b6000546001600160a01b0316331461028657fe5b60008281526001602052604080822080546001600160a01b0319166001600160a01b0385161790555183917fe2888d2900e8be92bf075b2e7c635f9813c3e18afb476d80b6dd545ad34d717391a25050565b33600090815260026020908152604090912082516102f89284019061042f565b5050565b6000546001600160a01b03165b90565b6000546001600160a01b0316331461032057fe5b60008181526001602052604080822080546001600160a01b03191690555182917f761c7f5deea18480fd4c3286fb929a518afd9c1faa2b9a6f4669ba2f86995a4a91a250565b60606040518060600160405280603481526020016104c860349139905090565b6001600160a01b038116600090815260026020818152604092839020805484516001821615610100026000190190911693909304601f810183900483028401830190945283835260609390918301828280156104235780601f106103f857610100808354040283529160200191610423565b820191906000526020600020905b81548152906001019060200180831161040657829003601f168201915b50505050509050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061047057805160ff191683800117855561049d565b8280016001018555821561049d579182015b8281111561049d578251825591602001919060010190610482565b506104a99291506104ad565b5090565b61030991905b808211156104a957600081556001016104b356fe48656c6c6f20796f7520686176652063616c6c65642074686520636f6e747261637420616363657373436f6e74726f6c2e736f6ca26469706673582212209f07f0e9ceb2d58d0e893803b32c5d8e4c883996935dda25df0f5d48f9cdd2e864736f6c63430006010033";
var accessControlAddr = "0xf9cd8413F0DF9827b35bAEA8A9611bC56c3a340f";
module.exports.accessControlAddr = accessControlAddr;

module.exports.setAddressContractID = async function (myContract, account) 
{
		// Setting the address of controlAccess Contract
		return new Promise(function (resolve, reject)
		{
			myContract.methods.setAddress(accessControlAddr)
			.send({from: account}
			, function(err, resp)
			{
				if (err) reject(err);
				else resolve(resp);
			});
		});
}

/************************** Balance  Contract variables ***************************/
module.exports.balanceABI = JSON.parse(fs.readFileSync('contracts/balance.json'));;
module.exports.balanceBytecode = "6080604052600280546001600160a01b0319167321a018606490c031a8c02bb6b992d8ae44add37f17905534801561003657600080fd5b506108f1806100466000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806313a5b50a1461006757806343fa62111461008f5780634b802d55146100be57806363c6c2ef146100f0578063e30081a014610127578063e70996f21461014d575b600080fd5b61008d6004803603602081101561007d57600080fd5b50356001600160a01b031661016a565b005b6100ac600480360360208110156100a557600080fd5b50356101a0565b60408051918252519081900360200190f35b61008d600480360360608110156100d457600080fd5b506001600160a01b0381351690602081013590604001356101b2565b6101136004803603604081101561010657600080fd5b50803590602001356102d1565b604080519115158252519081900360200190f35b61008d6004803603602081101561013d57600080fd5b50356001600160a01b03166104fc565b61008d6004803603602081101561016357600080fd5b5035610532565b6002546001600160a01b0316331461017e57fe5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526005602052604090205490565b6002546001600160a01b031633146101fb5760405162461bcd60e51b815260040180806020018281038252603081526020018061085d6030913960400191505060405180910390fd5b6001600160a01b038316600090815260036020908152604080832085845290915290205460ff1615156001146102625760405162461bcd60e51b81526004018080602001828103825260458152602001806107f16045913960600191505060405180910390fd5b6001600160a01b0383166000818152600360209081526040808320868452825291829020805461010061ff00199091161760ff19169055815184815291518593927fc845b00aa923b3cc1a6bf20401682a98918640788d078704e44ec3f19099439b92908290030190a3505050565b6002546000906001600160a01b031633146102e857fe5b600080546040805163c9776a6d60e01b815260048101879052905160609384936001600160a01b03169263c9776a6d9260248083019392829003018186803b15801561033357600080fd5b505afa158015610347573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561037057600080fd5b810190808051604051939291908464010000000082111561039057600080fd5b9083019060208201858111156103a557600080fd5b82516401000000008111828201881017156103bf57600080fd5b82525081516020918201929091019080838360005b838110156103ec5781810151838201526020016103d4565b50505050905090810190601f1680156104195780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561043c57600080fd5b90830190602082018581111561045157600080fd5b825164010000000081118282018810171561046b57600080fd5b82525081516020918201929091019080838360005b83811015610498578181015183820152602001610480565b50505050905090810190601f1680156104c55780820380516001836020036101000a031916815260200191505b50604052505050915091508051600014156104dc57fe5b81516104e457fe5b50505060009182526005602052604090912055600190565b6002546001600160a01b0316331461051057fe5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60015460408051637e74a89560e11b815233600482015290516001600160a01b039092169163fce9512a91602480820192600092909190829003018186803b15801561057d57600080fd5b505afa158015610591573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156105ba57600080fd5b81019080805160405193929190846401000000008211156105da57600080fd5b9083019060208201858111156105ef57600080fd5b825164010000000081118282018810171561060957600080fd5b82525081516020918201929091019080838360005b8381101561063657818101518382015260200161061e565b50505050905090810190601f1680156106635780820380516001836020036101000a031916815260200191505b5060405250505051600014156106aa5760405162461bcd60e51b81526004018080602001828103825260278152602001806108366027913960400191505060405180910390fd5b336000908152600360209081526040808320848452909152902054610100900460ff16156107095760405162461bcd60e51b81526004018080602001828103825260288152602001806107c96028913960400191505060405180910390fd5b33600090815260036020908152604080832084845290915290205460ff16156107635760405162461bcd60e51b815260040180806020018281038252602f81526020018061088d602f913960400191505060405180910390fd5b3360008181526003602090815260408083208584529091529020805460ff1916600117905581907f58d967c9a9a54b98c710c372cfe363bb9466f443b58def6976bd0e2dc77af8416107b4836101a0565b60408051918252519081900360200190a35056fe54686520757365722068617320616c726561647920626f75676874207468697320656c656d656e74546865726520686173206e6f74206265656e20616e79207075726368617365206173736f63696174656420746f2074686973206861736820616e642074686973207573657254686520636c69656e74206d75737420696e64696361746520686973207075626c6963206b65795573657220686173206e6f7420656e6f7567682070726976696c6567657320746f20646f2074686973206f7074696f6e5468652070726f6363657373206f662074686973207075726368617365206973207374696c6c206f6e20676f696e67a26469706673582212205b583c861a500c44131cba1e025ebd4d05288e24f5541449d0ae5807503cc49464736f6c63430006010033";
module.exports.balanceContractAddress = "0xA6B4D6487452b2B47B0Bf0313F2C69a361F72333";

module.exports.setAddressBalanceContract = async function(myContract, account)
{
	// Setting the address of DataLedger Contract
	return new Promise(function(resolve, reject)
	{
		myContract.methods.setAddress(contractLedgerAddress)
		.send({
			from: account
		}
		, function(err, resp)
		{
			if (err) reject(err);
			else resolve(resp);
		});
	});
}


module.exports.setAddressBalanceContract2 = async function(myContract, account)
{
	// Setting the address of accesControl Contract
	return new Promise(function(resolve, reject)
	{
		myContract.methods.setAddress2(accessControlAddr)
		.send({
			from: account
		}
		, function(err, resp)
		{
			if (err) reject(err);
			else resolve(resp);
		});
	});
}


// This function only can be used by the owner of the data.
// It sets the price of a piece of data, which is accessible by its hash
module.exports.setPrice = function(myContract, hash, price, account)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.setPriceData(hash, price)
		.send({
			from: account
		}
		, function (err, resp)
		{
			if (err) {reject(err);}
			else{resolve(resp);};
		});
	});
}


// Getting the price of a piece of data
module.exports.getPrice = async function (myContract, hash)
{
	let price = await myContract.methods.getPriceData(hash).call();
	return price
}


// Function that client must use to buy data
module.exports.buyData =  function(myContract, hash, tokens, account)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.payData(hash, tokens).send({
			from: account
		}
		, function(err, resp)
		{
			if (err) reject(err);
			else resolve(resp);
		});
	});

}


// Sending transaction
module.exports.sendTransaction = function(web3, _from, _to, _data)
{

	return new Promise(function(resolve, reject)
	{
		web3.eth.sendTransaction({
			from: _from,
			to: _to,
			data: _data,
			gas: '40000000',
			gasPrice: 0
		}
		, function(error, hash)
		{
			if (error)reject(error);
			else resolve(hash);
		});
	});

}


// Emiting an event in the contract showing that the transaction has been sent
module.exports.balanceSendToClient =  function(myContract
, hash
, txHashExchange
, txHashData
, account
, clientAccount)
{
	return new Promise(function(resolve, reject)
	{
		myContract.methods.sendToClient(clientAccount, hash, txHashExchange, txHashData)
		.send({from: account}
		, function(err, resp)
		{
			if (err) reject(err);
			else resolve(resp);
		});
	});

}
